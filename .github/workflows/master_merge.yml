name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: 
      - main

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Re-run push
  merge:
    permissions:
      pull-requests: write
    uses: ./.github/workflows/push.yml

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: merge
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "24.2.0"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: |
          export RELEASE_VERSION="${{ github.run_id }}-zn"
          ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Update Language pages, default en a index.html
        run: |
          cp ./out/en.html ./out/index.html
      - name: Re-Run Unit test with coverage
        run: ${{ steps.detect-package-manager.outputs.manager }} run test:coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload artifact for GH pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate release
        id: generate-release
        run: |
          VERSION_PREFIX="v"
          VERSION_MAJOR="1"
          VERSION_PATCH="0"
          VERSION_MAJOR_MINOR=$(git tag --list "${VERSION_PREFIX}${VERSION_MAJOR}.*.${VERSION_PATCH}" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+\.[0-9]+')
          VERSION_MINOR=${VERSION_MAJOR_MINOR//$VERSION_MAJOR./}
          if [ -z "$VERSION_MINOR" ]; then
            VERSION_MINOR=0
          else
            VERSION_MINOR=$((VERSION_MINOR + 1))
          fi
          NEW_TAG="${VERSION_PREFIX}${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
          echo "Generated new tag: $NEW_TAG"
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
      - name: Push Tag
        run: |
          echo '${{ steps.generate-release.outputs.tag }}'
          git config user.name "Github Actions"
          git config user.email "walcoorperation@gmail.com"
          git tag ${{ steps.generate-release.outputs.tag }}
          git push origin ${{ steps.generate-release.outputs.tag }}
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.generate-release.outputs.tag }}
          release_name: Release ${{ github.ref }} - ${{ steps.generate-release.outputs.tag }}
          body: |
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Smoketest on url change
  smoke-test-snapshot:
    permissions:
      pull-requests: write
    needs: deploy
    uses: ./.github/workflows/snapshot.yml
    with:
      deployed_url: ${{ needs.deploy.outputs.page_url }}
      continue_on_fail: false
      should_approve: false

  # Smoketest on url change
  smoke-test-performance:
    needs: deploy
    permissions:
      contents: read
    uses: ./.github/workflows/performance.yml
    with:
      deployed_url: ${{ needs.deploy.outputs.page_url }}
      continue_on_fail: false
