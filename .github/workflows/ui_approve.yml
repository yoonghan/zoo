name: Approve UI is presented correctly

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branchname to execute
        type: string
        required: true
      deployed_url:
        description: Which url to validate, include http://
        type: string
        required: true
  workflow_call:
    inputs:
      branch:
        description: Branchname to execute
        type: string
      deployed_url:
        description: Which url to validate, include http://
        type: string
    secrets:
      PAT:
        description: Checkout secret.
        outputs:

jobs:
  auto_approve:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.auto-commit-action.outputs.changes_detected }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ inputs.branch }}
          
      - name: Restore cache
        uses: actions/cache@v4
        id: all-cache
        with:
          path: |
            .next/cache
            ~/.cache/ms-playwright
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-all-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-all-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install Playwright Browsers
        if: steps.all-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.runner }}  playwright install --with-deps chromium
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.manager }} run build

      - name: ‚ñ∂Ô∏è Update Backstop Urls
        uses: ./.github/actions/backstop/rewrite
        with:
          deployed_url: ${{ inputs.deployed_url }}

      - name: ‚ñ∂Ô∏è Do a backstop test with failure
        shell: bash
        continue-on-error: true
        run: npm run backstop

      - name: ‚úÖ Approve all snapshots
        shell: bash
        continue-on-error: true
        run: npm run backstop:approve

      - name: ‚úÖ Re-Validate backstop
        shell: bash
        run: npm run backstop

      - name: üíº Auto commit on approved backstop
        uses: stefanzweifel/git-auto-commit-action@v4
        id: auto-commit-action
        with:
          commit_message: Update backstop with auto approval
          file_pattern: "backstop_data/bitmaps_reference/*.png"