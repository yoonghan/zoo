name: Snapshot Validate and Approve

on:
  workflow_dispatch:
    inputs:
      deployed_url:
        description: Deployed domain url
        type: choice
        options:
          - https://zoo.walcron.com
          - http://localhost:3000
        required: true
      test_no_image:
        description: Test without image load
        default: false
        type: boolean
      continue_on_fail:
        description: Continue on fail
        default: false
        type: boolean
      should_approve:
        description: Should do auto approval
        default: false
        type: boolean
  workflow_call:
    inputs:
      deployed_url:
        description: Deployed domain url
        default: https://zoo.walcron.com
        type: string
      test_no_image:
        description: Test without image load
        default: false
        type: boolean
      continue_on_fail:
        description: Continue on fail
        default: false
        type: boolean
      should_approve:
        description: Should do auto approval
        default: false
        type: boolean
      pr_checkout:
        description: Skip checkout
        default: false
        type: boolean
    secrets:
      PAT:
        description: Checkout secret.

jobs:
  snapshot:
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.auto-commit-action.outputs.changes_detected }}
    permissions:
      pull-requests: write
    steps:
      - name: Get PR branch name
        if: inputs.pr_checkout
        id: pr
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            core.setOutput('head_ref', "${{ inputs.head_ref }}");
      - name: ‚¨áÔ∏è Checkout repo required to commit and PAT Is required to retrigger pipeline
        if: ${{ inputs.should_approve }}
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ steps.pr.head_ref || github.ref }}

      - name: ‚¨áÔ∏è Checkout repo without commit
        if: ${{ !inputs.should_approve }}
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.pr.head_ref || github.ref }}
          
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: "24.2.0"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v4
        id: all-cache
        with:
          path: |
            .next/cache
            ~/.cache/ms-playwright
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-all-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-all-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Install Playwright Browsers
        if: steps.all-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.runner }}  playwright install chromium

      - name: ‚ñ∂Ô∏è Update Backstop Urls
        uses: ./.github/actions/backstop/rewrite
        with:
          deployed_url: ${{ inputs.deployed_url }}

      - name: Is an auto approval
        if: ${{ inputs.should_approve }}
        run: echo "Auto approval is set to true"

      - name: Run Background copy (if localhost)
        if: startsWith(inputs.deployed_url, 'http://localhost')
        run: |
          npm run build
          nohup npm start > npm.log 2>&1 &
          echo $! > npm.pid

      - name: Set backstop REF_FOLDER_POSTFIX if identified as localhost
        env:
          INPUT_URL: ${{ inputs.deployed_url }}
        run: |
          if [[ "$INPUT_URL" == *"localhost"* ]]; then
            REF_FOLDER_POSTFIX="localhost"
          fi
          echo "REF_FOLDER_POSTFIX=$REF_FOLDER_POSTFIX" >> $GITHUB_ENV

      - name: ‚ñ∂Ô∏è Validate snapshot check
        id: renderingCheck
        shell: bash
        continue-on-error: true
        env:
          LOAD_NO_IMAGE: ${{ inputs.test_no_image }}
        run: |
          npm run snapshot

      - name: ‚ñ∂Ô∏è Retry page rendering check if fail
        shell: bash
        if: steps.renderingCheck.outcome == 'failure'
        env:
          LOAD_NO_IMAGE: ${{ inputs.test_no_image }}
        continue-on-error: true
        run: rm -rf backstop_data/bitmaps_test && npm run snapshot

      - name: ‚úÖ Approve all snapshots
        if: ${{ inputs.should_approve }}
        shell: bash
        continue-on-error: true
        run: npm run snapshot:approve

      - name: Kill npm background process (if localhost)
        if: startsWith(inputs.deployed_url, 'http://localhost')
        run: |
          if [ -f npm.pid ]; then
            kill $(cat npm.pid)
            echo "Killed npm process"
          else
            echo "No PID file found"
          fi
          
      - name: üíº Commit on approved snapshot
        if: ${{ inputs.should_approve }}
        uses: stefanzweifel/git-auto-commit-action@v7
        id: auto-commit-action
        with:
          commit_message: Update snapshot with auto approval
          file_pattern: "backstop_data/bitmaps_reference*/*.png"

      - name: ‚ñ∂Ô∏è Re-Validate snapshot
        continue-on-error: ${{ inputs.continue_on_fail }}
        if: ${{ inputs.should_approve }}
        shell: bash
        run: npm run snapshot

      - name: Remove irrelevant reference folders for snapshot
        env:
          INPUT_URL: ${{ inputs.deployed_url }}
        run: |
          if [[ "$INPUT_URL" == *"localhost"* ]]; then
            rm -rf backstop_data/bitmaps_reference
          else
            rm -rf backstop_data/bitmaps_reference_*
          fi

      - name: ‚¨ÜÔ∏è Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-report
          path: backstop_data

      - name: ‚úÖ Validate backstopjs snapshot is valid
        if: ${{ !inputs.should_approve }}
        continue-on-error: ${{ inputs.continue_on_fail }}
        run: chmod a+x ./.github/scripts/snapshot-check.sh && ./.github/scripts/snapshot-check.sh
        shell: bash
